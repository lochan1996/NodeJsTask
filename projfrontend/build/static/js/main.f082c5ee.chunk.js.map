{"version":3,"sources":["components/menu.js","components/Base.js","components/TodoLists.js","components/helper/createTodo.js","components/createTodo.js","components/viewToDo.js","components/helper/editTodo.js","components/editToDo.js","components/AdminDashBoards.js","components/helper/deleteTodo.js","App.js","serviceWorker.js","index.js"],"names":["currentTab","history","path","location","pathname","color","withRouter","className","style","to","Base","title","description","children","TodoLists","props","Component","createTodos","newTodo","console","log","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","catch","err","createTodo","getDate","date","Date","toLocaleDateString","setState","onChangeTodoHeading","e","todo_heading","target","value","successMessage","display","state","success","errorMessage","failed","bind","onSubmit","todo_completed","country","this","val","preventDefault","Product","undefined","window","marginTop","type","onChange","required","selectCountry","viewToDo","orderID","Axios","get","match","params","id","data","_id","editTodos","updateId","editToDo","obj","editToDos","toDateString","Todo","todo","onClick","orderId","error","reload","AdminDashBoard","todos","search","SearchTerm","setSearchTerm","map","current","index","key","todolist","App","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f082c5ee.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport Axios from 'axios';\r\n\r\nconst API = 'http://localhost:8000/api'\r\n\r\n\r\n\r\nexport const getAllUsers = () => {\r\n    \r\n    return fetch(`${API}/getAllUsers`, {\r\n        method: \"GET\"\r\n\r\n    }).then(response => {\r\n        return response.json()\r\n    }).catch(err => console.log(err))\r\n}   \r\n\r\n\r\nconst currentTab = (history, path) => {\r\n    if (history.location.pathname === path) {\r\n        return { color: \"#2ecc72\" }\r\n    }\r\n    else {\r\n        return { color: \"#FFFFFF\" }\r\n    }\r\n};\r\n\r\nconst Menu = ({ history }) => (\r\n    <div>\r\n        <ul className=\"nav nav-tabs bg-dark\">\r\n\r\n\r\n\r\n            <li className=\"nav-item\">\r\n                <Link style={currentTab(history, \"/\")} className=\"nav-link\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link style={currentTab(history, \"/create\")} className=\"nav-link\" to=\"/create\">Create</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link style={currentTab(history, \"/allOrders\")} className=\"nav-link\" to=\"/allOrders\">Products</Link>\r\n            </li>\r\n            \r\n        </ul>\r\n    </div>\r\n)\r\n\r\n\r\nexport default withRouter(Menu)\r\n\r\n\r\n","import React from \"react\";\r\nimport Menu from \"./menu\";\r\n\r\nconst Base = ({\r\n    title = \"My Title\",\r\n    description = \"My desription\",\r\n    className = \"bg-dark text-white p-4\",\r\n    children\r\n}) => (\r\n        <div>\r\n            <Menu />\r\n            <div className=\"container-fluid\">\r\n                <div className=\"jumbotron bg-dark text-white text-center\">\r\n                    <h2 className=\"display-4\">{title}</h2>\r\n                   \r\n                </div>\r\n                {children && <div className={className}>{children}</div>}\r\n               \r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\nexport default Base;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Axios from 'axios';\r\nimport Base from './Base';\r\nimport { isAuthenticate } from './menu';\r\n\r\nconst API = 'http://138.197.0.245:8000/api' \r\n\r\n\r\nexport default class TodoLists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    render() {\r\n        \r\n        \r\n        return (\r\n            \r\n            <div>\r\n                <Base title=\"Task\" />\r\n                \r\n                 <div className=\"container-fluid\">\r\n                        <h1 className=\"text-center\">Welcome</h1>\r\n                 </div>\r\n                    \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","const API = 'http://localhost:8000/api/'\r\n\r\nconst createTodos = (newTodo) => {\r\n    console.log(newTodo)\r\n    return fetch(`${API}user/add`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(newTodo)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport default createTodos;","import React, { Component } from 'react';\r\nimport Base from './Base';\r\nimport createTodos from './helper/createTodo'\r\nimport { Link } from 'react-router-dom';\r\nimport { CountryDropdown } from 'react-country-region-selector';\r\n\r\n\r\n\r\n\r\nexport default class createTodo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.onChangeTodoHeading = this.onChangeTodoHeading.bind(this)\r\n        \r\n        this.onSubmit = this.onSubmit.bind(this)\r\n\r\n        this.state = {\r\n            todo_heading: '',            \r\n            todo_completed: false,\r\n            success: \"\",\r\n            failed:\"\",\r\n            country: '',\r\n            date:''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getDate();\r\n    }\r\n\r\n    getDate = () => {\r\n        var date = new Date().toLocaleDateString(\"en-US\");\r\n        this.setState({ date });\r\n    }\r\n    onChangeTodoHeading = (e) => {\r\n        this.setState({\r\n            todo_heading: e.target.value\r\n        })\r\n\r\n    }\r\n    \r\n\r\n    selectCountry(val) {\r\n        console.log('val',val)\r\n        this.setState({ country: val });\r\n    }\r\n    successMessage = () => {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-sm-3 text-left\">\r\n                    <div className=\"alert alert-success\" style={{ display: this.state.success ? \"\" : \"none\" }}>\r\n                        New Task Created <Link to=\"/allOrders\">Check Here</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    errorMessage = () => {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-sm-3 text-left\">\r\n                    <div className=\"alert alert-danger\" style={{ display: this.state.failed ? \"\" : \"none\" }}>\r\n                        Opps, Product already exists \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        const newTodo = {\r\n            Product: this.state.todo_heading,\r\n            date: this.state.date,\r\n            country: this.state.country\r\n        }\r\n        \r\n\r\n        if (typeof window !== undefined) {\r\n                \r\n                createTodos(newTodo).then(response => {\r\n                    \r\n                    console.log('response', response)\r\n                    if (response.err) {\r\n                        this.setState({\r\n                            failed: true,\r\n                            success: false\r\n                        })\r\n                    }\r\n                    \r\n\r\n                }).catch((err) => {\r\n                    console.log(err)\r\n                    \r\n                })\r\n            \r\n        }\r\n        \r\n\r\n        this.setState({\r\n            todo_heading: '',            \r\n            success: true,\r\n            country: '',\r\n            date:''\r\n        })\r\n\r\n    }\r\n\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <>\r\n                <Base title=\"Create Order\" />\r\n                <div>\r\n                    {this.successMessage()}\r\n                    {this.errorMessage()}\r\n\r\n                    \r\n                <div style={{ marginTop: 20 }}>\r\n                        {\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <label> ORDER: </label>\r\n                                    <input type=\"text\" className=\"form-control\" value={this.state.todo_heading} onChange={this.onChangeTodoHeading} required />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label> Country: </label>\r\n                                    <CountryDropdown\r\n                                        value={this.state.country}\r\n                                        onChange={(val) => this.selectCountry(val)} required />\r\n                                </div>\r\n                                \r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <input type=\"submit\" value=\"Create ToDo\" className=\"btn btn-primary\" />\r\n                                </div>\r\n                                \r\n\r\n                            </form> \r\n\r\n                        }\r\n                    </div>\r\n                    \r\n                </div>\r\n                </>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Axios from 'axios';\r\nimport Base from './Base';\r\n\r\n\r\n\r\nconst API = 'http://localhost:8000/api'\r\n\r\n\r\nexport default class viewToDo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todo_heading: '',\r\n            orderID:'',\r\n            success: \"\",\r\n            country: '',\r\n            date: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get('http://localhost:8000/api/view/' + this.props.match.params.id).then(response => {\r\n            console.log(response)\r\n            this.setState({\r\n                orderID: response.data._id,\r\n                todo_heading: response.data.Product,\r\n                date: response.data.date,\r\n                country: response.data.country\r\n            })\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Base title=\"View Order\" />\r\n\r\n                <div>\r\n\r\n                    <table className=\"table table-striped\" style={{ marginTop: 20 }}>\r\n                        \r\n                        \r\n                        <tbody>\r\n                            <tr>\r\n                                <th>OrderID</th>\r\n                                <td>{this.state.orderID}</td>\r\n                                <th>ProductName</th>\r\n                                <td>{this.state.todo_heading}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Country</th>\r\n                                <td>{this.state.country}</td>\r\n                                <th>Date</th>\r\n                                <td>{this.state.date}</td>\r\n                            </tr>\r\n                            {/*this.todolist()*/}\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","const API = 'http://localhost:8000/api/'\r\n\r\nconst editTodos = (newTodo, updateId) => {\r\n    return fetch(`${API}update/${updateId}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \r\n        },\r\n        body: JSON.stringify(newTodo)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport default editTodos;","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport Base from './Base';\r\nimport editToDos from './helper/editTodo' \r\nimport { Link } from 'react-router-dom';\r\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\r\n\r\n\r\n\r\n\r\nexport default class editToDo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.onChangeTodoHeading = this.onChangeTodoHeading.bind(this)\r\n        \r\n        this.onSubmit = this.onSubmit.bind(this)\r\n\r\n        this.state = {\r\n            todo_heading: '',\r\n            todo_completed: false,\r\n            success: \"\",\r\n            country: '',\r\n            date: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        var date = new Date().toDateString();\r\n        this.setState({ date });\r\n        Axios.get('http://localhost:8000/api/view/' + this.props.match.params.id).then(response => {\r\n            console.log(response)\r\n            this.setState({\r\n                todo_heading: response.data.Product,\r\n                date: this.state.date,\r\n                country: response.data.country\r\n            })\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    \r\n    onChangeTodoHeading = (e) => {\r\n        this.setState({\r\n            todo_heading: e.target.value\r\n        })\r\n\r\n    }\r\n    selectCountry(val) {\r\n        console.log('val', val)\r\n        this.setState({ country: val });\r\n    }\r\n    successMessage = () => {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-sm-3 text-left\">\r\n                    <div className=\"alert alert-success\" style={{ display: this.state.success ? \"\" : \"none\" }}>\r\n                         Task is Edited <Link to=\"/admin/dashboard\">Check Here</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n        const obj = {\r\n            Product: this.state.todo_heading,\r\n            date: this.state.date,\r\n            country: this.state.country\r\n        }\r\n        \r\n        let updateId = this.props.match.params.id\r\n        editToDos(obj, updateId).then(response => {\r\n\r\n            console.log('response', response)\r\n            \r\n\r\n\r\n\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        })\r\n        this.setState({\r\n            success: true\r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Base title=\"Update Order\" />\r\n                {this.successMessage()}\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label> ORDER: </label>\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.todo_heading} onChange={this.onChangeTodoHeading} required />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label> Country: </label>\r\n                        <CountryDropdown\r\n                            value={this.state.country}\r\n                            onChange={(val) => this.selectCountry(val)} />\r\n                    </div>\r\n\r\n\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Create ToDo\" className=\"btn btn-primary\" />\r\n                    </div>\r\n\r\n\r\n                </form> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Axios from 'axios';\r\nimport Base from './Base';\r\n\r\nimport { deleteThisOrder } from './helper/deleteTodo';\r\n\r\n\r\n\r\nconst API = 'http://localhost:8000/api'\r\n\r\nconst Todo = props => (\r\n    <tr>\r\n        \r\n        <td className={props.todo.Product }>{props.todo.Product}</td>\r\n        \r\n        <td className={props.todo.country}>{props.todo.country}</td>\r\n        <td>\r\n            <Link className=\"btn btn-secondary\" to={\"/view/\" + props.todo._id}>\r\n                View\r\n                </Link>\r\n\r\n\r\n        </td>\r\n        <td>\r\n            <Link className=\"btn btn-primary\" to={\"/edit/\" + props.todo._id}>\r\n                Edit\r\n                </Link>\r\n            \r\n\r\n        </td>\r\n        <td>\r\n            <button\r\n                onClick={() => {\r\n                    \r\n                    deleteThisOrder(props.todo._id).then(data => {\r\n                        if (data.error) {\r\n                            console.log(data.error)\r\n                        }\r\n                        else {\r\n                            window.location.reload(false)\r\n                        }\r\n                    })\r\n                }}\r\n                className=\"btn btn-danger\"\r\n            >\r\n                Delete\r\n            </button>\r\n\r\n        </td>\r\n\r\n\r\n    </tr>\r\n\r\n)\r\n\r\n\r\n\r\nexport default class AdminDashBoard extends Component {\r\n   \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: [],\r\n            search: '',\r\n            SearchTerm: '',\r\n            setSearchTerm:''\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        Axios.get(`${API}`).then(response => {\r\n            \r\n            this.setState({\r\n                todos: response.data\r\n            })\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        })\r\n       \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        Axios.get('http://localhost:8000/api/').then(response => {\r\n            this.setState({\r\n                todos: response.data\r\n            })\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    todolist() {\r\n        //console.log('data', this.state.todos)\r\n        return this.state.todos.map((current, index) => {\r\n            return <Todo todo={current} key={index} />\r\n        })\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    render() {\r\n        \r\n        return (\r\n\r\n            <div>\r\n                <Base title=\"All Orders\" />\r\n                \r\n                <div>\r\n                    \r\n                    <table className=\"table table-striped\" style={{ marginTop: 20 }}>\r\n                    <thead>\r\n                        <tr>\r\n                                    \r\n                                    <th>ProductName</th>\r\n                                    \r\n                                    <th>Country</th>\r\n\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.todolist()}\r\n                    </tbody>\r\n\r\n                        </table>\r\n                    </div> \r\n                \r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","const API = 'http://localhost:8000/api/'\r\n\r\nexport const deleteThisOrder = (orderId) => {\r\n\r\n    return fetch(`${API}delete/${orderId}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \r\n        },\r\n\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n}","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\nimport TodoLists from './components/TodoLists';\r\nimport createTodo from './components/createTodo';\r\nimport viewToDo from './components/viewToDo'\r\nimport editToDo from './components/editToDo';\r\nimport Menu from './components/menu';\r\nimport Base from './components/Base';\r\nimport AdminDashBoard from './components/AdminDashBoards';\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <div className=\"container\">\r\n                \r\n                <h2>Products Task APP</h2>\r\n                <Route path=\"/\" exact component={TodoLists} />\r\n                <Route path=\"/edit/:id\" component={editToDo} />\r\n                <Route path=\"/view/:id\" component={viewToDo} />\r\n                <Route path=\"/create\" component={createTodo} /> \r\n                <Route path=\"/allOrders\" component={AdminDashBoard} />\r\n                \r\n                \r\n\r\n\r\n\r\n        </div>\r\n            \r\n        </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}